{"version":3,"sources":["stores/UserStore.js","components/Input.js","components/Button.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","Input","className","type","props","placeholder","value","onChange","e","target","React","Component","Button","disabled","onClick","text","Login","state","password","buttonDidabled","property","val","trim","length","setState","fetch","method","headers","Accept","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf69ed6d.chunk.js","sourcesContent":["import { extendObservable } from \"mobx\";\n\nclass UserStore {\n  constructor() {\n    extendObservable(this, {\n      loading: true,\n      isLoggedIn: false,\n      username: \"\",\n    });\n  }\n}\n\nexport default new UserStore();\n","import React from \"react\";\n\nclass Input extends React.Component {\n  render() {\n    return (\n      <div className=\"inputField\">\n        <input\n          className=\"input\"\n          type={this.props.type}\n          placeholder={this.props.placeholder}\n          value={this.props.value}\n          onChange={(e) => {\n            this.props.onChange(e.target.value);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <div className=\"submitButton\">\n        <button\n          className=\"btn\"\n          disabled={this.props.disabled}\n          onClick={() => this.props.onClick()}\n        >\n          {this.props.text}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport Input from \"../components/Input\";\nimport Button from \"../components/Button\";\nimport UserStore from \"../stores/UserStore\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      buttonDidabled: false,\n    };\n  }\n\n  setInputValue(property, val) {\n    val = val.trim();\n    if (val.length > 12) {\n      return;\n    }\n    this.setState({\n      [property]: val,\n    });\n  }\n\n  resetForm() {\n    this.setState({\n      username: \"\",\n      password: \"\",\n      buttonDidabled: false,\n    });\n  }\n\n  async doLogin() {\n    if (!this.state.username) {\n      return;\n    }\n    if (!this.state.password) {\n      return;\n    }\n    this.setState({ buttonDidabled: true });\n    try {\n      let res = await fetch(\"/login\", {\n        method: \"post\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password,\n        }),\n      });\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else if (result && result.success === false) {\n        this.resetForm();\n        alert(result.msg);\n      }\n    } catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"loginForm\">\n        Log In\n        <Input\n          type=\"text\"\n          placeholder=\"Username\"\n          value={this.state.username ? this.state.username : \"\"}\n          onChange={(val) => this.setInputValue(\"username\", val)}\n        />\n        <Input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={this.state.password ? this.state.password : \"\"}\n          onChange={(val) => this.setInputValue(\"password\", val)}\n        />\n        <Button\n          text=\"Masuk\"\n          disabled={this.state.buttonDidabled}\n          onClick={() => this.doLogin()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport UserStore from \"./stores/UserStore\";\nimport Login from \"./pages/Login\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  async componentDidMount() {\n    try {\n      let res = await fetch(\"/isLoggedIn\", {\n        method: \"post\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      } else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n    } catch (e) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n  }\n\n  async doLogout() {\n    try {\n      let res = await fetch(\"/isLoggedIn\", {\n        method: \"post\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-type\": \"application/json\",\n        },\n      });\n\n      let result = await res.json();\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = \"\";\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    if (UserStore.loading) {\n      return (\n        <div className=\"app\">\n          <div className=\"container\">Loading ...</div>\n        </div>\n      );\n    } else {\n      if (UserStore.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className=\"container\">\n              Selamat datang, {UserStore.username}\n            </div>\n          </div>\n        );\n      }\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            <Login />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}